
events { }

http {

  map $http_upgrade $connection_upgrade {
    default upgrade;
    ''      close;
  }
  
  # redirect www -> non-www 

  server {
    server_name www.news.blog.aniketmitra.me;
    return 301 $scheme://news.blog.aniketmitra.me$request_uri;
  }
  
  # redirect http -> https

  server {
    listen 80;
    server_name news.blog.aniketmitra.me;
    return 301 https://news.blog.aniketmitra.me$request_uri;
  }

  # read the ssl certificate / key when listening on https
  
  server {
    listen 443 ssl;
    #server_name news.blog.aniketmitra.me;
    
    ssl_certificate /etc/nginx/certs/fullchain.pem;
    ssl_certificate_key /etc/nginx/certs/privkey.pem;
    # listen 80;
    root /usr/share/nginx/html;
    index index.html;

    server_name $SERVER_NAME;
    access_log /var/log/nginx/data-access.log combined;

    # serve the static files 
    
    location ~* \.(?:manifest|appcache|html?|xml|json)$ {
      expires -1;
      # access_log logs/static.log; # I don't usually include a static log
    }
    location ~ \.css {
      include  /etc/nginx/mime.types;
      add_header  Content-Type    text/css;
      try_files $uri =404;
      expires 1y;
      access_log off;
      add_header Cache-Control "public";
    }
    location ~ \.js {
      include  /etc/nginx/mime.types;
      add_header  Content-Type    application/x-javascript;
      try_files $uri =404;
      expires 1y;
      access_log off;
      add_header Cache-Control "public";
    }

    # Any route containing a file extension (e.g. /devicesfile.js)
    location ~ ^.+\..+$ {
      try_files $uri =404;
    }

    # Any route that doesn't have a file extension (e.g. /devices)
    location / {
      try_files $uri $uri/ /index.html =404;
    }
    # fetch data from proxied server when /api is called
    
    location /api {
      proxy_pass http://backend:5000/api;
      proxy_set_header X-Real-IP  $remote_addr;
      proxy_set_header X-Forwarded-For $remote_addr;
      proxy_set_header Host $host;
      proxy_set_header X-Forwarded-Proto $scheme;
      proxy_redirect http://backend:5000/api $scheme://$http_host/;
      proxy_http_version 1.1;
      proxy_set_header Upgrade $http_upgrade;
      proxy_set_header Connection $connection_upgrade;
      proxy_read_timeout 20d;
      proxy_buffering off;
    }

  }
}